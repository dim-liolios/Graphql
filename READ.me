
    https://dim-liolios.github.io/Graphql/
    https://render.com
    https://platform.zone01.gr/api/graphql-engine/v1/graphql
    
    https://dashboard.render.com/

    npm init -y: creates a package.json in root folder that helps Render (and other hosts)
        build and run our Node.js app
=============================================================================================================

1. Login:

    - we send: username + password:
    const credentials = btoa("john:secret123")

    - server responds with:
    {
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "user": { "id": 123, "name": "John" }
    }

--------------------------------------------------------------------------

2. Store JSON Web Token:

    localStorage.setItem('jwt_token', data.token)

--------------------------------------------------------------------------

3. Use JWT for GraphQL requests:

    - we get the JWT:
    const token = localStorage.getItem('jwt_token')

    fetch('https://((DOMAIN))/api/graphql-engine/v1/graphql', {
        headers: {
            'Authorization': `Bearer ${token}` => use JWT for authentication
        },
        body: JSON.stringify({
            query: '{ user { name email } }' => GraphQL query
        })
    })

--------------------------------------------------------------------------

1. and 2. in LoginManager (in login.js)
3. in ProfileManager (in profile.js)

=============================================================================================================

JWT example:

    Header:
        {
        "alg": "HS256",    =>  Algorithm used for signing
        "typ": "JWT"       =>  Token type
        }

    Payload:
        {
        "sub": "1234567890",           => Subject (user ID)
        "name": "John Doe",            => User name
        "iat": 1516239022,             => Issued at (timestamp)
        "exp": 1516242622,             => Expires at (timestamp)
        "role": "student"              => Custom data
        }
    
    Signature:
        - Server creates this using a secret key
        - Proves the token hasn't been tampered with
        - Only the server can validate it

=============================================================================================================

package.json:

    - tells Node.js and hosting platforms (like Render) how to run our project
    - defines our projectâ€™s metadata (name, version, main file)
    - lists dependencies (npm packages) if we use any
    - allows deployment platforms to run npm install and start our app with the correct entry point (main)

=============================================================================================================





import { createServer } from 'http'
import { request } from 'https'

function forwardToZone01(req, res, apiPath) {
    let body = ''
    req.on('data', chunk => { body += chunk })
    req.on('end', () => {
        const options = {
            hostname: 'platform.zone01.gr',
            path: apiPath,
            method: req.method,
            headers: {
                'Authorization': req.headers['authorization'],
                'Content-Type': req.headers['content-type'] || 'application/json',
                'User-Agent': 'Mozilla/5.0'
            },
            minVersion: 'TLSv1.2'
        }
        const proxyReq = request(options, proxyRes => {
            res.writeHead(proxyRes.statusCode, {
                ...proxyRes.headers,
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization'
            }) // sets the status code and headers of our response to frontend (github pages) to match those of the Zone01 server
            proxyRes.pipe(res)
            // streams the body of the response from zone01 directly to our frontend client (github pages)
        })
        proxyReq.on('error', err => {
            res.writeHead(502, {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization'
            })
            res.end('Bad Gateway: ' + err.message)
        })
        proxyReq.write(body)
        proxyReq.end()
    })
}

const server = createServer((req, res) => {
    res.setHeader('Access-Control-Allow-Origin', '*')
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization')

    if (req.method === 'OPTIONS') {
        res.writeHead(204)
        res.end()
        return
    }

    if (req.method === 'POST' && (req.url === '/api/auth/signin' || req.url === '/api/graphql-engine/v1/graphql')) {
        forwardToZone01(req, res, req.url)
        return
    }

    res.writeHead(404)
    res.end('Not found')
})

const PORT = process.env.PORT || 3000
server.listen(PORT, () => {
    console.log(`Proxy server running on port: ${PORT}`)
})